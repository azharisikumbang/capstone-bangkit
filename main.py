# -*- coding: utf-8 -*-
"""upload.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cg2i-m8PE9Ji49698PbObYQZLgstuive
"""

import os
import numpy as np
from google.cloud import storage
from keras.models import model_from_json
import tensorflow as tf
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route("/predict",method=['POST'])
def predict():
 if flask.request.method == "POST":
  embedding_dim = 100
  max_length = 16
  trunc_type='post'
  padding_type='pre'
  oov_tok = "<OOV>"
  stopword = [ "a", "about", "am", "an", "and", "any", "are", "as", "at", "be", "because", "been", "before", "between", "both", "but", "by", "could", "did", "do", "does", "doing", "down", "during", "each", "few", "for", "from", "further", "had", "has", "have", "having", "he", "he'd", "he'll", "he's", "her", "here", "here's", "hers", "herself", "him", "himself", "his", "how", "how's", "into", "is", "it", "it's", "its", "itself", "let's", "me", "more", "most", "nor", "of", "on", "once", "only", "or", "other", "ought", "our", "ours", "ourselves", "out", "own", "same", "she", "she'd", "she'll", "she's", "should", "so", "some", "such", "than", "that", "that's", "the", "their", "theirs", "them", "themselves", "then", "there", "there's", "these", "they", "they'd", "they'll", "they're", "they've", "this", "those", "through", "to", "too", "under", "until", "up",  "was", "we", "we'd", "we'll", "we're", "we've", "were", "what", "what's", "when", "when's", "where", "where's", "which", "while", "who", "who's", "whom", "why", "why's", "with" ] 

  with open('model.json','r') as json_model:
     load_model = json_model.read()

  with open('token.json','r') as json_model:
     load_tokenizer = json_model.read()

  text1,text2,text3=param_NIK = request.args.get("text1"),
                                request.args.get("text2"),
                                request.args.get("text3")

  model=model_from_json(load_model)
  model.load_weights('model.h5')

  sentences = text1 +' '+ text2 +' '+ text3

  for word in stopword:
    token = " " + word + " "
    sentences = sentences.replace(token, " ")
    sentences = sentences.replace("  ", " ")
    sentences = sentences.replace("'", " ")

  sentences=[sentences]

  tokenizer = tf.keras.preprocessing.text.tokenizer_from_json(load_tokenizer)
  tokenizer.fit_on_texts(sentences) 

  word_index = tokenizer.word_index
  vocab_size=len(word_index)    

  sequences = tokenizer.texts_to_sequences(sentences)  
  padded = tf.keras.preprocessing.sequence.pad_sequences(sequences, maxlen=max_length, padding = padding_type, truncating=trunc_type)

  prediction = np.round(model.predict(padded)[0][0])

  message = {'predict': int(prediction)}
 return jsonify(message)

if __name__ == "__main__":
    app.run(host='0.0.0.0')
